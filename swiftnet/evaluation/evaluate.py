import contextlib

import numpy as np
import torch
from tqdm import tqdm
from time import perf_counter

import swiftnet.lib.cylib as cylib

# import pysnooper

import csv

__all__ = ['compute_errors', 'get_pred', 'evaluate_semseg', 'get_semseg_map']

# compute_errors() process the confusion matrix generated by cylib
def compute_errors(conf_mat, class_info, verbose=True):
    num_correct = conf_mat.trace()
    num_classes = conf_mat.shape[0]
    total_size = conf_mat.sum()
    avg_pixel_acc = num_correct / total_size * 100.0
    TPFP = conf_mat.sum(0)
    TPFN = conf_mat.sum(1)
    FN = TPFN - conf_mat.diagonal()
    FP = TPFP - conf_mat.diagonal()
    class_iou = np.zeros(num_classes)
    class_recall = np.zeros(num_classes)
    class_precision = np.zeros(num_classes)
    per_class_iou = []
    # for content-aware scheduler
    class_positive_ratio = np.zeros(num_classes)
    true_class_ratio = np.zeros(num_classes)
    if verbose:
        print('Errors:')
    for i in range(num_classes):
        TP = conf_mat[i, i]
        class_iou[i] = (TP / (TP + FP[i] + FN[i])) * 100.0
        # for content-aware scheduler
        # the ratio of inference result as this class in all pixels
        class_positive_ratio[i] = TPFP[i] / total_size * 100.0
        # true ratio of this class in all pixels, ground truth
        true_class_ratio[i] = TPFN[i] / total_size * 100.0
        if TPFN[i] > 0:
            class_recall[i] = (TP / TPFN[i]) * 100.0
        else:
            class_recall[i] = 0
        if TPFP[i] > 0:
            class_precision[i] = (TP / TPFP[i]) * 100.0
        else:
            class_precision[i] = 0

        class_name = class_info[i]
        per_class_iou += [(class_name, class_iou[i])]
        if verbose:
            print('\t%s IoU accuracy = %.2f %%' % (class_name, class_iou[i]))
        print('\t%s positive ratio = %.2f %%' % (class_name, class_positive_ratio[i]))
        print('\t%s true ratio = %.2f %%' % (class_name, true_class_ratio[i]))
    avg_class_iou = class_iou.mean()
    avg_class_recall = class_recall.mean()
    avg_class_precision = class_precision.mean()
    if verbose:
        print('IoU mean class accuracy -> TP / (TP+FN+FP) = %.2f %%' % avg_class_iou)
        print('mean class recall -> TP / (TP+FN) = %.2f %%' % avg_class_recall)
        print('mean class precision -> TP / (TP+FP) = %.2f %%' % avg_class_precision)
        print('pixel accuracy = %.2f %%' % avg_pixel_acc)
    return avg_pixel_acc, avg_class_iou, avg_class_recall, avg_class_precision, total_size, per_class_iou


def get_pred(logits, labels, conf_mat):
    _, pred = torch.max(logits.data, dim=1)
    pred = pred.byte().cpu()
    pred = pred.numpy().astype(np.int32)
    true = labels.numpy().astype(np.int32)
    cylib.collect_confusion_matrix(pred.reshape(-1), true.reshape(-1), conf_mat)


def mt(sync=False):
    if sync:
        torch.cuda.synchronize()
    return 1000 * perf_counter()

# @pysnooper.snoop()
def evaluate_semseg(model, data_loader, class_info, observers=()):
    model.eval()
    managers = [torch.no_grad()] + list(observers)
    with contextlib.ExitStack() as stack:
        for ctx_mgr in managers:
            stack.enter_context(ctx_mgr)
        conf_mat = np.zeros((model.num_classes, model.num_classes), dtype=np.uint64)
        for step, batch in tqdm(enumerate(data_loader), total=len(data_loader)):
            batch['original_labels'] = batch['original_labels'].numpy().astype(np.uint32)
            logits, additional = model.do_forward(batch, batch['original_labels'].shape[1:3])
            pred = torch.argmax(logits.data, dim=1).byte().cpu().numpy().astype(np.uint32)
            # print('shape of the pred map: ')
            # print(pred.shape) # (1, 1024, 2048)
            # print('shape of the flatten pred map: ')
            # print(pred.flatten().shape) # (2097152,)
            for o in observers:
                o(pred, batch, additional)
            cylib.collect_confusion_matrix(pred.flatten(), batch['original_labels'].flatten(), conf_mat)
        print('')
        pixel_acc, iou_acc, recall, precision, _, per_class_iou = compute_errors(conf_mat, class_info, verbose=True)
    model.train()
    return iou_acc, per_class_iou

def compute_single_image_errors(conf_mat, class_info, verbose=True):
    num_correct = conf_mat.trace()
    num_classes = conf_mat.shape[0]
    total_size = conf_mat.sum()
    avg_pixel_acc = num_correct / total_size * 100.0
    TPFP = conf_mat.sum(0)
    TPFN = conf_mat.sum(1)
    FN = TPFN - conf_mat.diagonal()
    FP = TPFP - conf_mat.diagonal()
    class_iou = np.zeros(num_classes)
    class_recall = np.zeros(num_classes)
    class_precision = np.zeros(num_classes)
    per_class_iou = []
    if verbose:
        print('Errors:')
    for i in range(num_classes):
        TP = conf_mat[i, i]
        class_iou[i] = (TP / (TP + FP[i] + FN[i])) * 100.0
        if TPFN[i] > 0:
            class_recall[i] = (TP / TPFN[i]) * 100.0
        else:
            class_recall[i] = 0
        if TPFP[i] > 0:
            class_precision[i] = (TP / TPFP[i]) * 100.0
        else:
            class_precision[i] = 0

        class_name = class_info[i]
        per_class_iou += [(class_name, class_iou[i])]
        if verbose:
            print('\t%s IoU accuracy = %.2f %%' % (class_name, class_iou[i]))
    avg_class_iou = np.nanmean(class_iou) #class_iou.nanmean()
    avg_class_recall = np.nanmean(class_recall )#class_recall.nanmean()
    avg_class_precision = np.nanmean(class_precision) #class_precision.nanmean()
    if verbose:
        print('IoU mean class accuracy -> TP / (TP+FN+FP) = %.2f %%' % avg_class_iou)
        print('mean class recall -> TP / (TP+FN) = %.2f %%' % avg_class_recall)
        print('mean class precision -> TP / (TP+FP) = %.2f %%' % avg_class_precision)
        print('pixel accuracy = %.2f %%' % avg_pixel_acc)
    return avg_pixel_acc, avg_class_iou, avg_class_recall, avg_class_precision, total_size, per_class_iou

# idea: get two preds!!!
def get_semseg_map(model, data_loader_sr, data_loader_val, class_info):
    model.eval()
    managers = [torch.no_grad()]
    pred_maps = []
    with contextlib.ExitStack() as stack:
        for ctx_mgr in managers:
            stack.enter_context(ctx_mgr)
        for step, (batch_sr, batch_val) in enumerate(zip(data_loader_sr, data_loader_val)):
            batch_sr['original_labels'] = batch_sr['original_labels'].numpy().astype(np.uint32)
            batch_val['original_labels'] = batch_val['original_labels'].numpy().astype(np.uint32)
            logits_sr, additional_sr = model.do_forward(batch_sr, batch_sr['original_labels'].shape[1:3])
            logits_val, additional_val = model.do_forward(batch_val, batch_val['original_labels'].shape[1:3])
            pred_sr = torch.argmax(logits_sr.data, dim=1).byte().cpu().numpy().astype(np.uint32)
            pred_val = torch.argmax(logits_val.data, dim=1).byte().cpu().numpy().astype(np.uint32)
            pred_maps.append(pred_sr)
            pred_maps.append(pred_val)
            # print(pred_sr.shape) # (1, 1024, 2048)
            # print(pred_val.shape) # (1, 1024, 2048)
        print('')
    model.train()
    return pred_maps